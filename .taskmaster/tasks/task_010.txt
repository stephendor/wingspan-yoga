# Task ID: 10
# Title: Secure Video Library and Streaming (ST-104)
# Status: review
# Dependencies: 9
# Priority: high
# Description: Develop the members-only video library with secure video streaming from Mux or Vimeo.
# Details:
Set up video hosting on Mux or Vimeo. Create an API route that, for authenticated members, generates a signed URL or private playback token for a requested video. On the frontend, build a grid layout for the video library with search and category filters. Use a responsive video player (e.g., Plyr.io) to play the content from the secure URL.
<info added on 2025-08-12T13:02:03.797Z>
Mux has been implemented as the video provider, utilizing RS256 signed playback tokens to secure HLS streams. The core logic resides in `src/lib/video/mux.ts` and is served by the `/api/videos/[videoId]/playback-info` API route. The frontend `VideoPlayer` component was updated to handle the tokenized URLs. API tests are in place, covering authorized access, insufficient membership (403), and video not found (404) scenarios. Further implementation details are available in `docs/videos/secure-playback.md`. The remaining work involves end-to-end verification with real Mux signing keys and confirming that direct stream access without a token is denied.
</info added on 2025-08-12T13:02:03.797Z>

# Test Strategy:
Verify that only authenticated, subscribed members can access the video library page. Attempt to access a video's direct URL without a valid token/signature to ensure it fails. Test video playback on various devices and network speeds to check adaptive streaming.

# Subtasks:
## 1. Code & Security Review [pending]
### Dependencies: None
### Description: A senior developer or peer should review the implementation. This includes the API route that generates the Mux signed tokens and the frontend code that requests and uses them.
### Details:
Check for security best practices (e.g., are secrets handled correctly?), code clarity, and efficiency. Ensure the RS256 token implementation is correct.

## 2. Functional & Authorization Testing [pending]
### Dependencies: None
### Description: Systematically execute the test strategy. A tester or developer should attempt to access the video library and video assets under different conditions.
### Details:
Verify a subscribed member can view videos. Verify a non-subscribed member is blocked. Verify a logged-out user is redirected to login. Verify that trying to access a Mux stream URL directly (without a valid token) results in a failure/403 error.

## 3. UI/UX and Player Experience Review [pending]
### Dependencies: None
### Description: Review the frontend experience. Check the video grid layout, search, and category filters for usability. Test the Plyr.io player controls.
### Details:
Does the player have a good loading state? Is the search/filter functionality intuitive and fast? Is the overall layout aesthetically pleasing and on-brand?

## 4. Cross-Device & Performance Testing [pending]
### Dependencies: None
### Description: Test the video library on multiple devices (desktop, tablet, mobile) and browsers (Chrome, Safari, Firefox).
### Details:
Confirm the layout is responsive and the video player works correctly everywhere. Check how Mux's adaptive streaming performs on a simulated slow network connection.

## 5. Implement Review Feedback [pending]
### Dependencies: 10.1, 10.2, 10.3, 10.4
### Description: Create and address any tickets or action items that arise from the reviews in subtasks 10.1-10.4.
### Details:
This is the "fix-it" phase, where any bugs, UI inconsistencies, or security concerns are resolved before the task is officially completed.

