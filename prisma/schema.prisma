generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String
  avatar             String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  password           String?
  emailVerified      DateTime?
  bio                String?
  phone              String?
  dateOfBirth        DateTime?
  emergencyContact   String?
  membershipType     MembershipType    @default(FREE)
  membershipStatus   MembershipStatus  @default(ACTIVE)
  subscriptionId     String?           @unique
  role               Role              @default(MEMBER)
  accounts           Account[]
  bookings           Booking[]
  retreatBookings    RetreatBooking[]
  payments           Payment[]
  reviews            Review[]
  sessions           Session[]
  activeSubscription UserSubscription? @relation(fields: [subscriptionId], references: [id])
  videoProgress      VideoProgress[]
  blogPosts          BlogPost[]
  uploadedMedia      Media[]           @relation("MediaUploader")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SubscriptionPlan {
  id                String             @id @default(cuid())
  stripePriceId     String             @unique
  interval          BillingInterval
  amount            Int
  currency          String             @default("usd")
  name              String
  description       String?
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userSubscriptions UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                   String           @id @default(cuid())
  stripeSubscriptionId String           @unique
  stripeCustomerId     String
  planId               String
  status               MembershipStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean          @default(false)
  rawStripeData        Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  payments             Payment[]
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  user                 User?

  @@map("subscriptions")
}

model Payment {
  id                 String            @id @default(cuid())
  stripePaymentId    String            @unique
  amount             Int
  currency           String            @default("gbp")
  status             PaymentStatus
  description        String?
  paymentMethod      String?
  createdAt          DateTime          @default(now())
  userId             String
  userSubscriptionId String?           @map("subscriptionId")
  classId            String?
  classInstanceId    String?
  retreatBookingId   String?
  class              Class?            @relation(fields: [classId], references: [id])
  classInstance      ClassInstance?    @relation(fields: [classInstanceId], references: [id])
  retreatBooking     RetreatBooking?   @relation(fields: [retreatBookingId], references: [id])
  userSubscription   UserSubscription? @relation(fields: [userSubscriptionId], references: [id])
  user               User              @relation(fields: [userId], references: [id])

  @@map("payments")
}

model WebhookEvent {
  id          String    @id
  type        String
  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@map("webhook_events")
}

model Instructor {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  bio            String?
  avatar         String?
  specialties    String[]
  isActive       Boolean         @default(true)
  yearsExp       Int?
  certification  String?
  socialLinks    Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  classInstances ClassInstance[]
  classTemplates ClassTemplate[]
  classes        Class[]
  videos         Video[]

  @@map("instructors")
}

model Video {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  duration           Int
  thumbnailUrl       String?
  videoUrl           String
  streamingUrl       String?
  category           VideoCategory
  difficulty         DifficultyLevel
  tags               String[]
  isPublic           Boolean         @default(false)
  membershipRequired MembershipType  @default(FREE)
  viewCount          Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  instructorId       String
  reviews            Review[]
  progress           VideoProgress[]
  instructor         Instructor      @relation(fields: [instructorId], references: [id])

  @@map("videos")
}

model VideoProgress {
  id          String   @id @default(cuid())
  userId      String
  videoId     String
  progress    Int      @default(0) // Progress in seconds from start of video
  completed   Boolean  @default(false)
  lastWatched DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_progress")
}

model ClassTemplate {
  id           String           @id @default(cuid())
  title        String
  description  String?
  dayOfWeek    Int
  startTime    String
  endTime      String
  capacity     Int
  price        Int
  difficulty   DifficultyLevel
  category     ClassCategory
  location     ClassLocation
  meetingUrl   String?
  notes        String?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  instructorId String
  exceptions   ClassException[]
  instances    ClassInstance[]
  instructor   Instructor       @relation(fields: [instructorId], references: [id])

  @@map("class_templates")
}

model ClassInstance {
  id           String        @id @default(cuid())
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  capacity     Int?
  price        Int?
  status       ClassStatus   @default(SCHEDULED)
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  templateId   String
  instructorId String?
  bookings     Booking[]
  instructor   Instructor?   @relation(fields: [instructorId], references: [id])
  template     ClassTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  payments     Payment[]

  @@unique([templateId, date])
  @@map("class_instances")
}

model ClassException {
  id         String        @id @default(cuid())
  date       DateTime
  reason     String?
  createdAt  DateTime      @default(now())
  templateId String
  template   ClassTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, date])
  @@map("class_exceptions")
}

model Class {
  id           String          @id @default(cuid())
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  capacity     Int
  price        Int
  difficulty   DifficultyLevel
  location     ClassLocation
  status       ClassStatus     @default(SCHEDULED)
  meetingUrl   String?
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  instructorId String
  category     ClassCategory
  bookings     Booking[]
  instructor   Instructor      @relation(fields: [instructorId], references: [id])
  payments     Payment[]

  @@map("classes")
}

model Booking {
  id              String         @id @default(cuid())
  status          BookingStatus  @default(CONFIRMED)
  bookedAt        DateTime       @default(now())
  cancelledAt     DateTime?
  notes           String?
  userId          String
  classId         String?
  classInstanceId String?
  class           Class?         @relation(fields: [classId], references: [id], onDelete: Cascade)
  classInstance   ClassInstance? @relation(fields: [classInstanceId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@unique([userId, classInstanceId])
  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  content   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  videoId   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model BlogPost {
  id              String              @id @default(cuid())
  title           String
  slug            String              @unique
  excerpt         String?
  content         String?             // Legacy field, kept for migration
  contentBlocks   Json?               // Rich content blocks structure
  metaDescription String?
  featuredImage   String?
  category        String?
  featured        Boolean             @default(false)
  published       Boolean             @default(false)
  publishedAt     DateTime?
  accessLevel     BlogPostAccessLevel @default(PUBLIC)
  tags            String[]
  authorId        String?
  authorName      String              // Legacy field, kept for migration
  authorAvatar    String?             // Legacy field, kept for migration
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  author          User?               @relation(fields: [authorId], references: [id])

  @@map("blog_posts")
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int       // File size in bytes
  width       Int?      // For images/videos
  height      Int?      // For images/videos
  duration    Int?      // For videos (in seconds)
  url         String    // Storage URL
  thumbnailUrl String?  // Thumbnail URL for videos
  uploadedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  uploader    User?     @relation("MediaUploader", fields: [uploadedBy], references: [id])

  @@map("media")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

enum MembershipType {
  FREE
  BASIC
  PREMIUM
  UNLIMITED
  ADMIN
}

enum Role {
  MEMBER
  INSTRUCTOR
  ADMIN
}

enum MembershipStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum VideoCategory {
  VINYASA
  HATHA
  YIN
  RESTORATIVE
  MEDITATION
  BREATHWORK
  POWER
  GENTLE
}

enum ClassCategory {
  VINYASA
  HATHA
  YIN
  RESTORATIVE
  MEDITATION
  BREATHWORK
  POWER
  GENTLE
  WORKSHOP
  RETREAT
  BEGINNER_COURSE
  PRENATAL
  SENIORS
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum ClassLocation {
  STUDIO
  ONLINE
  HYBRID
}

enum ClassStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WAITLIST
}

// Retreat Models
model Retreat {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  description  String
  location     String
  startDate    DateTime
  endDate      DateTime
  totalPrice   Int      // in cents
  depositPrice Int      // in cents  
  capacity     Int
  images       String[] // Array of image URLs
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  bookings     RetreatBooking[]
  
  @@map("retreats")
}

model RetreatBooking {
  id                String               @id @default(cuid())
  userId            String
  retreatId         String
  totalPrice        Int                 // in cents
  amountPaid        Int                 @default(0) // in cents
  paymentStatus     RetreatPaymentStatus @default(PENDING)
  depositPaidAt     DateTime?
  balanceDueDate    DateTime
  finalPaidAt       DateTime?
  notes             String?             // Special requests or notes
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  retreat           Retreat             @relation(fields: [retreatId], references: [id], onDelete: Cascade)
  payments          Payment[]
  
  @@unique([userId, retreatId])
  @@map("retreat_bookings")
}

enum RetreatPaymentStatus {
  PENDING
  DEPOSIT_PAID
  PAID_IN_FULL
  CANCELLED
  REFUNDED
}

enum BlogPostAccessLevel {
  PUBLIC
  MEMBERS_ONLY
  PREMIUM_ONLY
  RETREAT_ATTENDEES_ONLY
  MAILCHIMP_SUBSCRIBERS_ONLY
}
