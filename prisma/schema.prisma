// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  password      String?
  emailVerified DateTime?

  // Profile Information
  bio              String?
  phone            String?
  dateOfBirth      DateTime?
  emergencyContact String?

  // Subscription & Membership
  membershipType   MembershipType   @default(FREE)
  membershipStatus MembershipStatus @default(ACTIVE)
  role             Role             @default(MEMBER)
  subscriptionId   String?          @unique

  // Relations
  accounts           Account[]
  sessions           Session[]
  activeSubscription UserSubscription? @relation(fields: [subscriptionId], references: [id])
  bookings           Booking[]
  videoProgress      VideoProgress[]
  reviews            Review[]
  payments           Payment[]

  @@map("users")
}

// Authentication Models (NextAuth.js compatible)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Subscription & Payment Models (refactored)
model SubscriptionPlan {
  id            String          @id @default(cuid())
  stripePriceId String          @unique
  interval      BillingInterval
  amount        Int // stored in smallest currency unit (e.g. cents)
  currency      String          @default("usd")
  name          String // display name (e.g. Basic, Premium)
  description   String?
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  userSubscriptions UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                   String           @id @default(cuid())
  stripeSubscriptionId String           @unique
  stripeCustomerId     String
  planId               String
  status               MembershipStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean          @default(false)
  rawStripeData        Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  user     User?
  payments Payment[]

  @@map("subscriptions") // Preserve existing table name
}

model Payment {
  id              String        @id @default(cuid())
  stripePaymentId String        @unique
  amount          Int // Amount in pence (GBP)
  currency        String        @default("gbp")
  status          PaymentStatus
  description     String?
  paymentMethod   String? // card, bank_transfer, etc.
  createdAt       DateTime      @default(now())

  // Relations - supports both legacy classes and new class instances
  userId             String
  userSubscriptionId String? @map("subscriptionId") // keep underlying column for now
  classId            String? // Legacy class payment
  classInstanceId    String? // New instance payment

  user             User              @relation(fields: [userId], references: [id])
  userSubscription UserSubscription? @relation(fields: [userSubscriptionId], references: [id])
  class            Class?            @relation(fields: [classId], references: [id])
  classInstance    ClassInstance?    @relation(fields: [classInstanceId], references: [id])

  @@map("payments")
}

// Webhook event idempotency tracking (Stripe events processed)
model WebhookEvent {
  id          String   @id // Stripe event id
  type        String
  createdAt   DateTime @default(now())
  processedAt DateTime? // reserved for future granular state

  @@map("webhook_events")
}

// Instructor Model
model Instructor {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  bio           String?
  avatar        String?
  specialties   String[] // Array of specialties
  isActive      Boolean  @default(true)
  yearsExp      Int? // Years of experience
  certification String?
  socialLinks   Json? // JSON object for social media links
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  classes         Class[]
  classTemplates  ClassTemplate[]
  classInstances  ClassInstance[]
  videos          Video[]

  @@map("instructors")
}

// Video Library Models
model Video {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  duration           Int // Duration in seconds
  thumbnailUrl       String?
  videoUrl           String
  streamingUrl       String? // For streaming services like Vimeo/Mux
  category           VideoCategory
  difficulty         DifficultyLevel
  tags               String[]
  isPublic           Boolean         @default(false)
  membershipRequired MembershipType  @default(FREE)
  viewCount          Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relations
  instructorId String
  instructor   Instructor      @relation(fields: [instructorId], references: [id])
  progress     VideoProgress[]
  reviews      Review[]

  @@map("videos")
}

model VideoProgress {
  id          String   @id @default(cuid())
  userId      String
  videoId     String
  progress    Float    @default(0) // Percentage completed (0-100)
  completed   Boolean  @default(false)
  lastWatched DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_progress")
}

// Class Booking Models - Recurring Class System
model ClassTemplate {
  id          String         @id @default(cuid())
  title       String
  description String?
  dayOfWeek   Int // 0 = Sunday, 1 = Monday, etc.
  startTime   String // Time in HH:MM format (e.g., "18:00")
  endTime     String // Time in HH:MM format (e.g., "19:00")
  capacity    Int
  price       Int // Price in pence (GBP)
  difficulty  DifficultyLevel
  category    ClassCategory
  location    ClassLocation
  meetingUrl  String? // For online classes
  notes       String? // Special instructions
  isActive    Boolean        @default(true) // Can disable template without deleting
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  instructorId String
  instructor   Instructor      @relation(fields: [instructorId], references: [id])
  instances    ClassInstance[]
  exceptions   ClassException[]

  @@map("class_templates")
}

model ClassInstance {
  id               String          @id @default(cuid())
  date             DateTime // Specific date for this instance
  startTime        DateTime // Full datetime for this instance
  endTime          DateTime // Full datetime for this instance
  capacity         Int? // Override template capacity if needed
  price            Int? // Override template price if needed
  status           ClassStatus     @default(SCHEDULED)
  notes            String? // Instance-specific notes
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  templateId       String
  template         ClassTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  instructorId     String? // Override template instructor if needed
  instructor       Instructor?     @relation(fields: [instructorId], references: [id])
  bookings         Booking[]
  payments         Payment[]

  @@unique([templateId, date])
  @@map("class_instances")
}

model ClassException {
  id         String        @id @default(cuid())
  date       DateTime // Date when class is cancelled/modified
  reason     String? // Why was it cancelled/modified
  createdAt  DateTime      @default(now())

  // Relations
  templateId String
  template   ClassTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, date])
  @@map("class_exceptions")
}

// Legacy model for backwards compatibility - will be migrated
model Class {
  id          String          @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  capacity    Int
  price       Int // Price in pence (GBP)
  difficulty  DifficultyLevel
  category    ClassCategory
  location    ClassLocation
  status      ClassStatus     @default(SCHEDULED)
  meetingUrl  String? // For online classes
  notes       String? // Special instructions
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  bookings     Booking[]
  payments     Payment[]

  @@map("classes")
}

model Booking {
  id          String        @id @default(cuid())
  status      BookingStatus @default(CONFIRMED)
  bookedAt    DateTime      @default(now())
  cancelledAt DateTime?
  notes       String? // Special requests or notes

  // Relations - supports both legacy classes and new class instances
  userId          String
  classId         String? // Legacy class booking
  classInstanceId String? // New instance booking
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  class           Class?         @relation(fields: [classId], references: [id], onDelete: Cascade)
  classInstance   ClassInstance? @relation(fields: [classInstanceId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@unique([userId, classInstanceId])
  @@map("bookings")
}

// Review & Rating Models
model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  title     String?
  content   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - can review either videos or classes
  userId  String
  videoId String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Content Management
model BlogPost {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  excerpt      String?
  content      String
  featured     Boolean   @default(false)
  published    Boolean   @default(false)
  publishedAt  DateTime?
  tags         String[]
  authorName   String
  authorAvatar String?
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("blog_posts")
}

// System Settings
model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

// Enums
enum MembershipType {
  FREE
  BASIC
  PREMIUM
  UNLIMITED
  ADMIN
}

enum Role {
  MEMBER
  INSTRUCTOR
  ADMIN
}

enum MembershipStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum VideoCategory {
  VINYASA
  HATHA
  YIN
  RESTORATIVE
  MEDITATION
  BREATHWORK
  POWER
  GENTLE
}

enum ClassCategory {
  VINYASA
  HATHA
  YIN
  RESTORATIVE
  MEDITATION
  BREATHWORK
  POWER
  GENTLE
  WORKSHOP
  RETREAT
  BEGINNER_COURSE
  PRENATAL
  SENIORS
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum ClassLocation {
  STUDIO
  ONLINE
  HYBRID
}

enum ClassStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WAITLIST
}
